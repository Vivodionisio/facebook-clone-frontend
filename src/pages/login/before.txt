import React, { useState, useEffect } from 'react'
import './login.css'
import SignUpModal from './SignUpModal'
import CloseRoundedIcon from '@mui/icons-material/CloseRounded'
import VisibilityOffRoundedIcon from '@mui/icons-material/VisibilityOffRounded'
import VisibilityRoundedIcon from '@mui/icons-material/VisibilityRounded'

export default function Login() {
  const [isOpen, setIsOpen] = useState(false)

  function onClose() {
    setIsOpen(false)
  }

  const initialValues = {
    username: '',
    email: '',
    password: '',
    passwordConfirmation: ''
  }

  const [formValues, setFormValues] = useState(initialValues)
  const [formErrors, setFormErrors] = useState({})
  const [isSubmit, setIsSubmit] = useState(false)
  const [isVisible, setIsVisible] = useState(false)

  const handleChange = e => {
    const { name, value } = e.target
    setFormValues({ ...formValues, [name]: value })
  }

  const handleSubmit = e => {
    e.preventDefault()
    setFormErrors(validate(formValues))
    setIsSubmit(true)
  }

  useEffect(() => {
    console.log(formErrors)
    if (Object.keys(formErrors).length === 0 && isSubmit) {
      // console.log(formValues)
    }
  }, [formErrors])

  const validate = values => {
    const errors = {}
    const regex =
      /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/

    if (!values.username) {
      errors.username = 'Username is required!'
    } else if (values.username.trim().length < 3) {
      errors.username = 'Username must have a minimim of 3 characters'
    } else if (values.username.trim().length > 15) {
      errors.username = 'Username must not exceed 15 characters'
    }

    if (!values.email) {
      errors.email = 'Email address is required!'
    } else if (!regex.test(values.email)) {
      errors.email = 'Please enter a valid email'
    }

    if (!values.password) {
      errors.password = 'Please enter a password'
    } else if (values.password.trim().length < 8) {
      errors.password = 'Password must have a minimum of 8 characters!'
    } else if (values.password.trim().length > 20) {
      errors.password = 'Password must not exceed 20 characters!'
    } else {
    }

    if (values.passwordConfirmation !== values.password) {
      errors.passwordConfirmation = 'Passwords do not match'
    }
    return errors
  }

  const passwordVisibility = e => {
    setIsVisible(!isVisible)
    console.log(isVisible)
  }

  return (
    <>
      <div className="login-container">
        <div className="header-wrapper ">
          <h1>Facebook</h1>
          <h2>
            Facebook helps you connect and share with the people in your life.
          </h2>
        </div>
        <form>
          <input type="text" placeholder="Email address or phone number" />
          <input type="text" placeholder="Password" />
          <input type="submit" value="Log In" />
          <div className="forgotton-password-btn-wrapper">
            <span className="forgotton-password">Forgotten password?</span>
          </div>
          <button
            onClick={e => {
              e.preventDefault()
              setIsOpen(true)
            }}
            className="new-account-btn"
          >
            Create new account
          </button>
        </form>
      </div>
      <SignUpModal open={isOpen}>
        {/* <pre>{JSON.stringify(formValues, undefined, 2)}</pre> */}
        <div className="modal-header-wrapper signup-header">
          <h1 className="modal-title ">Sign Up</h1>
          <button className="modal-close-btn" onClick={onClose}>
            <CloseRoundedIcon className="modal-close-btn-icon" />
          </button>
        </div>
        <form onSubmit={handleSubmit} className="signup-form">
          <input
            type="text"
            className={formErrors.email && 'input-error'}
            name="username"
            placeholder="Username"
            value={formValues.username}
            onChange={handleChange}
          ></input>
          {formErrors.username && (
            <p className="form-message">{formErrors.username}</p>
          )}
          <input
            type="email"
            className={formErrors.email && 'input-error'}
            name="email"
            placeholder="Email Address"
            value={formValues.email}
            onChange={handleChange}
          />
          {formErrors.email && (
            <p className="form-message">{formErrors.email}</p>
          )}
          <div className="password-field-container">
            <input
              type={isVisible ? 'text' : 'password'}
              className={formErrors.password && 'input-error'}
              name="password"
              placeholder="Password"
              value={formValues.password}
              onChange={handleChange}
            />
            <button className="visibility-btn" type="button">
              {isVisible ? (
                <VisibilityRoundedIcon onClick={e => passwordVisibility(e)} />
              ) : (
                <VisibilityOffRoundedIcon
                  onClick={e => passwordVisibility(e)}
                />
              )}
            </button>
          </div>
          {formErrors.password && (
            <p className="form-message">{formErrors.password}</p>
          )}

          <input
            type="password"
            className={formErrors.passwordConfirmation && 'input-error'}
            name="passwordConfirmation"
            placeholder="Re-enter Password"
            value={formValues.passwordConfirmation}
            onChange={handleChange}
          />
          {formErrors.passwordConfirmation && (
            <p className="form-message">{formErrors.passwordConfirmation}</p>
          )}
          <button className="btn-basic">Submit</button>
        </form>
      </SignUpModal>
    </>
  )
}
